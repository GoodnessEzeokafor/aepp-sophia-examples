contract SmartBank =
  record account = {password : string, amount : int}
  type state = map(address, account)
  
  function init() : state =
    {}
  
  // Deposit tokens to the contract
  public function deposit(pass : string) =
    require(Call.value > 0, "The given amount can't be 0 or negative")
    if(!user_exists(Call.caller))
      put(state{[Call.caller] = {password = hash_pwd(pass), amount = Call.value}})
    else
      let old_record = state[Call.caller]
      require(hash_pwd(pass) == old_record.password, "Password hashes do not match")
      let changed_record = old_record{amount = old_record.amount + Call.value}
      put(state{[Call.caller] = changed_record})
    
  // Withdraw means transfer-to-self 
  public function withdraw(pass : string, amount : int) = 
    transfer(Call.caller, amount, pass)

  // Transfer to another key 
  public function transfer(address : address, amount : int, pass : string) = 
    require(user_exists(address), "User does not exist")
    require(hash_pwd(pass) == state[Call.caller].password, "Wrong password")
    require(amount =< state[Call.caller].amount, "Not enough money")
    let old_record = state[address]
    put(state{[address] = old_record{amount = old_record.amount - amount}})
    Chain.spend(address, amount)

  // Remove caller from state
  public function remove_self(password : string) =
    remove_user_by_address(Call.caller, password)

  // Check if user exists
  public function user_exists(user : address) : bool =
    if(Map.member(user, state))
      true
    else
      false
      
  // Check caller balance
  public function check_self_balance() : int =
    require(user_exists(Call.caller),String.concat("User does not exist: ", Address.to_str(Call.caller)))
    state[Call.caller].amount
    
  private function hash_pwd(pwd : string) : string = 
    Int.to_str(String.sha3(pwd)) // hashing algorithm can be changed at any time 
     
  private function remove_user_by_address(address : address, password : string) = 
    require(user_exists(address),String.concat("User does not exist: ", Address.to_str(address)))
    Chain.spend(address, state[address].amount)
    put(Map.delete(address, state))
  
  private function require(b : bool, msg : string) =
     if(!b)
       abort(msg)