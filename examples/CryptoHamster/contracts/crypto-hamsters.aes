contract CryptoHamster =

    record state = {
        index : int,
        map_hamsters : map(string, hamster)}

    record hamster = {
        id: int,
        name: string,
        dna: int}

    public stateful function init() = 
        { index = 1,
          map_hamsters = {}}

    public function create_hamster(hamster_name: string) =
        require(!name_exists(hamster_name), "Name is already taken")

        create_hamster_by_name_dna(hamster_name, generate_random_dna())

    public function name_exists(name: string) : bool =
        Map.member(name, state.map_hamsters)

    public function get_hamster_dna(name: string) : int =
        require(name_exists(name), "There is no hamster with that name!")

        let needed_hamster : hamster = state.map_hamsters[name]

        needed_hamster.dna

    private function create_hamster_by_name_dna(name: string, dna: int) =
        let new_hamster : hamster = {
            id = state.index,
            name = name,
            dna = dna}

        put(state{map_hamsters[name] = new_hamster})
        put(state{index = (state.index + 1)})

    private function generate_random_dna() : int =
        Chain.block_hash(Chain.block_height - 1) - Chain.timestamp + state.index

    private function require(expression : bool, error : string) =
        if(!expression) 
            abort(error)