contract ExchangeMarket =

  record state = {
    ae_price : int,
    token_price: int}

  type query_type = string
  type answer_type = int
  type oracle_id = oracle(query_type, answer_type)
  type query_id = oracle_query(query_type, answer_type)

  public stateful function init(ae_price': int, token_price': int) = 
    require(ae_price' > 0 , "The price for the AE must be greater than zero ")
    require(token_price' > 0 , "The price for the token must be greater than zero")
    {ae_price = ae_price', token_price = token_price'}
    
  public function get_ae_price() : int = state.ae_price
  public function get_token_price() : int = state.token_price

  function create_query(oracle: oracle_id, question: query_type, query_fee: int, query_ttl: int, relative_ttl: int) : query_id =
    require(query_fee > 0 , "Query fee must be greater than zero")
    require(query_ttl > 0 , "Query TTL must be greater than zero")
    require(relative_ttl > 0 , "Relative TTL must be greater than zero")
    Oracle.query(oracle, question, query_fee, RelativeTTL(query_ttl), RelativeTTL(relative_ttl))

  function create_ae_price_query(oracle: oracle_id, query_fee: int, query_ttl: int, relative_ttl: int) : query_id =
    require(query_fee > 0 , "Query fee must be greater than zero")
    require(query_ttl > 0 , "Query TTL must be greater than zero")
    require(relative_ttl > 0 , "Relative TTL must be greater than zero")
    Oracle.query(oracle, "Give me the AE price in USD", query_fee, RelativeTTL(query_ttl), RelativeTTL(relative_ttl))

  function create_token_price_query(oracle: oracle_id, query_fee: int, query_ttl: int, relative_ttl: int) : query_id =
    require(query_fee > 0 , "Query fee must be greater than zero")
    require(query_ttl > 0 , "Query TTL must be greater than zero")
    require(relative_ttl > 0 , "Relative TTL must be greater than zero")
    Oracle.query(oracle, "Give me the Token price in USD", query_fee, RelativeTTL(query_ttl), RelativeTTL(relative_ttl))

  function query_fee(oracle: oracle_id) : int =
    Oracle.query_fee(oracle)

  public function get_answer(oracle: oracle_id, query: query_id) : int =
    switch(Oracle.get_answer(oracle, query))
      None => 0
      Some(response) => response
      
  function update_ae_price(ae_price': int) =
    require(ae_price' > 0, "The price must be greater than zero")
    put(state{ae_price = ae_price'})

  function update_token_price(token_price': int) =
    require(token_price' > 0, "The price must be greater than zero")
    put(state{token_price = token_price'})

  private function require(expression: bool, err: string) =
  	if(!expression)
		  abort(err)