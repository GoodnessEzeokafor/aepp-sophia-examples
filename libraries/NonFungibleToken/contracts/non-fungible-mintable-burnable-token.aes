include "math.aes"

contract NonFungibleMintableBurnable =
  record state = { 
    name              : string,
    symbol            : string,
    owner             : address,
    owned_tokens_count  : map(address, int),
    token_owner        : map(int, address),
    token_approvals    : map(int, address),
    operator_approvals : map(address, map(address, bool))}

  public stateful function  init(name : string, symbol : string) = {
  	name = name,
  	symbol = symbol,
    owner = Call.caller,
  	owned_tokens_count = {},
  	token_owner = {},
  	token_approvals = {},
    operator_approvals = {}}

  public function name() : string = 
    state.name

  public function symbol() : string = 
    state.symbol

  public function balance_of(token_owner : address) : int = 
    Map.lookup_default(token_owner, state.owned_tokens_count, 0)

  public function owner_of(tokenId : int) =
    Map.lookup_default(tokenId, state.token_owner, #0)

  public function get_approved(tokenId : int) : address =
    Map.lookup_default(tokenId, state.token_approvals, #0)

  public function is_approved_for_all(owner : address, operator : address) : bool =
    state.operator_approvals[owner][operator]

  public stateful function mint(tokenId : int, to : address) = 
    only_owner(Call.caller)
    require(check_token_exists(tokenId), "Token can't be overrided")

    put(state{token_owner = state.token_owner{[tokenId] = to}})
    put(state{owned_tokens_count[to] = SafeMath.add(Map.lookup_default(to, state.owned_tokens_count, 0), 1)})

  public stateful function burn(tokenId : int) = 
    only_token_owner(Call.caller, tokenId) 
    remove_token_from(Call.caller, tokenId)

  public stateful function approve(tokenId : int, to : address) =
    let owner : address = owner_of(tokenId)
    
    require(to != Call.caller, "Receiver can't be same as sender")
    require(Call.caller == owner || is_approved_for_all(owner, Call.caller), "Not owner or not approved")
    
    put(state{token_approvals = state.token_approvals{[tokenId] = to}})

  public stateful function transfer_from(from : address, to : address, tokenId : int) =
    require(is_approved_or_owner(Call.caller, tokenId), "Caller isn't approved or owner")
    
    clear_approval(from, tokenId)
    remove_token_from(from, tokenId)
    add_token_to(to, tokenId)

  public stateful function set_approval_for_all(to : address, approved : bool) =
    // ensure_allowed(Call.caller)
    put(state{operator_approvals[Call.caller = {}][to] = approved})
  
  private function check_token_exists(tokenId : int) : bool =
    switch(Map.lookup(tokenId, state.token_owner))
      None    => false
      Some(x) => true

  // private function ensure_allowed(key : address) =
  //   switch(Map.lookup(key, state.operator_approvals))
  //     None => put(state{operator_approvals[key] = {}})
  //     Some(_) => ()

  private stateful function add_token_to(to : address, tokenId : int) = 
    put(state{token_owner = state.token_owner{[tokenId] = to}})
    put(state{owned_tokens_count[to] = SafeMath.add(Map.lookup_default(to, state.owned_tokens_count, 0), 1)})

  private stateful function remove_token_from(from : address, tokenId : int) =
    put(state{token_owner = state.token_owner{[tokenId] = #0}})
    put(state{owned_tokens_count[from] = SafeMath.sub(Map.lookup_default(from, state.owned_tokens_count, 0), 1)})

  private stateful function clear_approval(from : address, tokenId : int) = 
    put(state{token_approvals = state.token_approvals{[tokenId] = #0}})

  // private function lookupByAddress(k : address, m, v) =
  // 	switch(Map.lookup(k, m))
	//     None    => v
	//     Some(x) => x

  // private function lookupById(k : int, m, v) =
  // 	switch(Map.lookup(k, m))
	//     None    => v
	//     Some(x) => x

  // private function add(_a : int, _b : int) : int =
  //   let c : int = _a + _b
  //   require(c >= _a, "Error")
  //   c

  // private function sub(_a : int, _b : int) : int =
  //   require(_b =< _a, "Error")
  //   _a - _b

  private function require(expression : bool, error : string) =
    if(!expression) 
      abort(error)

  private function only_owner(owner : address) =
    if(owner != state.owner) 
      abort("Only owner can mint!")

  private function only_token_owner(owner : address, tokenId : int) =
    require(owner != Map.lookup_default(tokenId, state.token_owner, #0), "Only token owner can transfer!")
    // if(owner != Map.lookup_default(tokenId, state.token_owner, #0)) 
    //   abort("Only token owner can transfer!")

  private function is_approved_or_owner(spender : address, tokenId : int) : bool = 
    let owner : address = owner_of(tokenId)
    get_approved(tokenId) == spender || owner == spender || is_approved_for_all(owner, spender)